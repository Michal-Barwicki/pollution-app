{"version":3,"sources":["components/SearchBox/SearchBox.js","components/CityItem/CityItem.js","components/CityList/CityList.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","state","filteredCountries","showOptions","inputValue","handleChange","e","availableCountries","props","currentTarget","value","filter","country","toLowerCase","indexOf","setState","handleClick","innerText","handleEnterKey","keyCode","localStorage","getItem","this","nextProps","nextState","setItem","optionList","length","className","map","index","key","onClick","type","placeholder","onChange","onKeyDown","handleSubmit","Component","CityItem","cityDescription","visibleDescription","toggleVisible","getDescription","axios","get","city","then","res","page","data","query","pages","purePageDescription","Object","keys","extract","replace","catch","err","console","log","message","parameter","toFixed","CityList","uniqueCities","array","storage","result","forEach","element","push","citiesData","removeDuplicates","App","changeCountryToCode","countryName","preventDefault","countryCode","currentDate","Date","toISOString","substring","results","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.651f9d9b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// import \"./SearchBox.scss\";\r\nexport class SearchBox extends Component {\r\n  state = {\r\n    filteredCountries: [],\r\n    showOptions: false,\r\n    inputValue: \"\"\r\n  };\r\n\r\n  componentWillMount() {\r\n    localStorage.getItem(\"inputValue\") &&\r\n      this.setState({\r\n        inputValue: localStorage.getItem(\"inputValue\")\r\n      });\r\n  }\r\n\r\n  handleChange = e => {\r\n    const { availableCountries } = this.props;\r\n    const inputValue = e.currentTarget.value;\r\n    const filteredCountries = availableCountries.filter(\r\n      country => country.toLowerCase().indexOf(inputValue.toLowerCase()) > -1\r\n    );\r\n    this.setState({\r\n      filteredCountries,\r\n      showOptions: true,\r\n      inputValue\r\n    });\r\n  };\r\n\r\n  handleClick = e => {\r\n    this.setState({\r\n      filteredCountries: [],\r\n      showOptions: false,\r\n      inputValue: e.currentTarget.innerText\r\n    });\r\n  };\r\n\r\n  handleEnterKey = e => {\r\n    const { filteredCountries } = this.state;\r\n    if (e.keyCode === 13) {\r\n      this.setState({\r\n        showOptions: false,\r\n        inputValue: filteredCountries[0]\r\n      });\r\n    }\r\n  };\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    localStorage.setItem(\"inputValue\", nextState.inputValue);\r\n  }\r\n\r\n  render() {\r\n    const { filteredCountries, showOptions, inputValue } = this.state;\r\n    let optionList;\r\n    if (showOptions && inputValue) {\r\n      if (filteredCountries.length) {\r\n        optionList = (\r\n          <ul className=\"search-box__ul\">\r\n            {filteredCountries.map((country, index) => {\r\n              return (\r\n                <li\r\n                  className=\"search-box__options\"\r\n                  key={country}\r\n                  onClick={this.handleClick}\r\n                >\r\n                  {country}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      } else {\r\n        optionList = (\r\n          <div className=\"search-box__ul\">\r\n            <em>Country is not available!</em>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <form className=\"search-box\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Country name\"\r\n          className=\"search-box__input\"\r\n          onChange={this.handleChange}\r\n          onKeyDown={this.handleEnterKey}\r\n          value={inputValue}\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          value=\"\"\r\n          className=\"search-box__btn\"\r\n          onClick={e => this.props.handleSubmit(e, inputValue)}\r\n        >\r\n          <i className=\"fas fa-search\"></i>\r\n        </button>\r\n        {optionList}\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n// import \"./CityItem.scss\";\r\n\r\nclass CityItem extends Component {\r\n  state = {\r\n    cityDescription: \"\",\r\n    visibleDescription: false\r\n  };\r\n  handleClick = () => {\r\n    this.toggleVisible();\r\n    this.getDescription();\r\n  };\r\n\r\n  toggleVisible = () => {\r\n    this.setState({ visibleDescription: !this.state.visibleDescription });\r\n  };\r\n\r\n  getDescription = () => {\r\n    axios\r\n      .get(\r\n        `https://en.wikipedia.org/w/api.php?format=json&action=query&origin=*&generator=search&gsrnamespace=0&gsrlimit=1&prop=extracts&exintro&explaintext&exsentences=1&exlimit=max&gsrsearch=${this.props.city}`\r\n      )\r\n      .then(res => {\r\n        const page = res.data.query.pages;\r\n        const pageId = Object.keys(page)[0];\r\n        const pageDescription = page[pageId].extract;\r\n        const purePageDescription = pageDescription.replace(\"(listen)\", \"\");\r\n        this.setState({\r\n          cityDescription: purePageDescription\r\n        });\r\n      })\r\n      .catch(err => console.log(`Something went wrong ${err.message}`));\r\n  };\r\n  componentWillReceiveProps() {\r\n    this.setState({\r\n      visibleDescription: false,\r\n      cityDescription: \"\"\r\n    });\r\n  }\r\n  render() {\r\n    const { index, city, value, parameter } = this.props;\r\n    const { cityDescription, visibleDescription } = this.state;\r\n    return (\r\n      <>\r\n        <div className=\"city-item\" onClick={this.handleClick}>\r\n          <div>\r\n            <span className=\"city-item__name\">\r\n              {index + 1}. {city}:\r\n            </span>\r\n            <span className=\"city-item__value\">\r\n              {value.toFixed(1)} {parameter}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"city-item__description\">\r\n          {visibleDescription && cityDescription}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default CityItem;\r\n","import React from \"react\";\r\nimport CityItem from \"../CityItem/CityItem\";\r\nconst CityList = props => {\r\n  const removeDuplicates = (array, key) => {\r\n    if (array.length !== 0) {\r\n      let storage = {};\r\n      let result = [];\r\n      array.forEach(element => {\r\n        if (!storage[element[key]]) {\r\n          storage[element[key]] = true;\r\n          result.push(element);\r\n        }\r\n      });\r\n      return result;\r\n    } else return props.citiesData;\r\n  };\r\n\r\n  const uniqueCities = removeDuplicates(props.citiesData, \"city\");\r\n  uniqueCities.length = 10;\r\n  return uniqueCities.map((city, index) => (\r\n    <CityItem {...city} index={index} key={index} />\r\n  ));\r\n};\r\n\r\nexport default CityList;\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.scss\";\nimport SearchBox from \"../components/SearchBox/SearchBox\";\nimport CityList from \"../components/CityList/CityList\";\n\nclass App extends Component {\n  state = {\n    citiesData: []\n  };\n  availableCountries = [\"Poland\", \"Germany\", \"Spain\", \"France\"];\n\n  changeCountryToCode = countryName => {\n    switch (countryName) {\n      case \"poland\":\n        return \"PL\";\n      case \"germany\":\n        return \"DE\";\n      case \"spain\":\n        return \"ES\";\n      case \"france\":\n        return \"FR\";\n      default:\n        return false;\n    }\n  };\n\n  handleSubmit = (e, inputValue) => {\n    e.preventDefault();\n    if (this.availableCountries.indexOf(inputValue) > -1) {\n      inputValue = inputValue.toLowerCase();\n      const countryCode = this.changeCountryToCode(inputValue);\n      const currentDate = new Date().toISOString().substring(0, 10);\n      axios\n        .get(\n          `https://api.openaq.org/v1/measurements?country=${countryCode}&parameter=pm25&date_from=${currentDate}&order_by=value&sort=desc&limit=80`\n        )\n        .then(res => {\n          const citiesData = res.data.results;\n          this.setState({\n            citiesData\n          });\n        })\n        .catch(err => console.log(`Something went wrong ${err.message}`));\n    } else {\n      return;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SearchBox\n          availableCountries={this.availableCountries}\n          handleSubmit={this.handleSubmit}\n        />\n        <CityList citiesData={this.state.citiesData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}